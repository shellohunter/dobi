Index: linux-4.14.54/drivers/net/ethernet/mediatek/Kconfig
===================================================================
--- linux-4.14.54.orig/drivers/net/ethernet/mediatek/Kconfig
+++ linux-4.14.54/drivers/net/ethernet/mediatek/Kconfig
@@ -1,5 +1,6 @@
 config NET_VENDOR_MEDIATEK
-	bool "MediaTek ethernet driver"
+	tristate "MediaTek ethernet driver"
+    default y
 	depends on ARCH_MEDIATEK
 	---help---
 	  If you have a Mediatek SoC with ethernet, say Y.
Index: linux-4.14.54/drivers/net/ethernet/mtk/gsw_mt7621.c
===================================================================
--- linux-4.14.54.orig/drivers/net/ethernet/mtk/gsw_mt7621.c
+++ linux-4.14.54/drivers/net/ethernet/mtk/gsw_mt7621.c
@@ -28,11 +28,113 @@ void mtk_switch_w32(struct mt7620_gsw *g
 {
 	iowrite32(val, gsw->base + reg);
 }
+EXPORT_SYMBOL(mtk_switch_w32);
 
 u32 mtk_switch_r32(struct mt7620_gsw *gsw, unsigned reg)
 {
 	return ioread32(gsw->base + reg);
 }
+EXPORT_SYMBOL(mtk_switch_r32);
+
+
+static int gsw_mt7621_mii_busy_wait(struct mt7620_gsw *gsw)
+{
+	unsigned long t_start = jiffies;
+
+	while (1) {
+		if (!(mtk_switch_r32(gsw, MT7620A_GSW_REG_PIAC) & GSW_MDIO_ACCESS))
+			return 0;
+		if (time_after(jiffies, t_start + GSW_REG_PHY_TIMEOUT))
+			break;
+	}
+
+	dev_err(gsw->dev, "mdio: MDIO timeout\n");
+	return -1;
+}
+
+u32 gsw_mt7621_mii_write(struct mt7620_gsw *gsw, u32 phy_addr,
+			     u32 phy_register, u32 write_data)
+{
+	if (gsw_mt7621_mii_busy_wait(gsw))
+		return -1;
+
+	write_data &= 0xffff;
+
+	mtk_switch_w32(gsw, GSW_MDIO_ACCESS | GSW_MDIO_START | GSW_MDIO_WRITE |
+		(phy_register << GSW_MDIO_REG_SHIFT) |
+		(phy_addr << GSW_MDIO_ADDR_SHIFT) | write_data,
+		MT7620A_GSW_REG_PIAC);
+
+	if (gsw_mt7621_mii_busy_wait(gsw))
+		return -1;
+
+	return 0;
+}
+
+
+u32 gsw_mt7621_mii_read(struct mt7620_gsw *gsw, int phy_addr, int phy_reg)
+{
+	u32 d;
+
+	if (gsw_mt7621_mii_busy_wait(gsw))
+		return 0xffff;
+
+	mtk_switch_w32(gsw, GSW_MDIO_ACCESS | GSW_MDIO_START | GSW_MDIO_READ |
+		(phy_reg << GSW_MDIO_REG_SHIFT) |
+		(phy_addr << GSW_MDIO_ADDR_SHIFT),
+		MT7620A_GSW_REG_PIAC);
+
+	if (gsw_mt7621_mii_busy_wait(gsw))
+		return 0xffff;
+
+	d = mtk_switch_r32(gsw, MT7620A_GSW_REG_PIAC) & 0xffff;
+
+	return d;
+}
+
+
+void mt7621_mdio_w32(struct mt7620_gsw *gsw, u32 reg, u32 val)
+{
+	gsw_mt7621_mii_write(gsw, 0x1f, 0x1f, (reg >> 6) & 0x3ff);
+	gsw_mt7621_mii_write(gsw, 0x1f, (reg >> 2) & 0xf,  val & 0xffff);
+	gsw_mt7621_mii_write(gsw, 0x1f, 0x10, val >> 16);
+}
+
+u32 mt7621_mdio_r32(struct mt7620_gsw *gsw, u32 reg)
+{
+	u16 high, low;
+
+	gsw_mt7621_mii_write(gsw, 0x1f, 0x1f, (reg >> 6) & 0x3ff);
+	low = gsw_mt7621_mii_read(gsw, 0x1f, (reg >> 2) & 0xf);
+	high = gsw_mt7621_mii_read(gsw, 0x1f, 0x10);
+
+	return (high << 16) | (low & 0xffff);
+}
+
+
+
+int mt7621_has_carrier(struct fe_priv *priv)
+{
+	struct mt7620_gsw *gsw = (struct mt7620_gsw *)priv->soc->swpriv;
+	int i;
+
+	for (i = 0; i < GSW_PORT6; i++)
+		if (mtk_switch_r32(gsw, GSW_REG_PORT_STATUS(i)) & 0x1)
+			return 1;
+	return 0;
+}
+
+void mt7621_handle_carrier(struct fe_priv *priv)
+{
+	if (!priv->phy)
+		return;
+
+	if (mt7621_has_carrier(priv))
+		netif_carrier_on(priv->netdev);
+	else
+		netif_carrier_off(priv->netdev);
+}
+
 
 static irqreturn_t gsw_interrupt_mt7621(int irq, void *_priv)
 {
@@ -40,14 +142,14 @@ static irqreturn_t gsw_interrupt_mt7621(
 	struct mt7620_gsw *gsw = (struct mt7620_gsw *)priv->soc->swpriv;
 	u32 reg, i;
 
-	reg = mt7530_mdio_r32(gsw, 0x700c);
-	mt7530_mdio_w32(gsw, 0x700c, reg);
+	reg = mt7621_mdio_r32(gsw, 0x700c);
+	mt7621_mdio_w32(gsw, 0x700c, reg);
 
 	for (i = 0; i < 5; i++)
 		if (reg & BIT(i)) {
 			unsigned int link;
 
-			link = mt7530_mdio_r32(gsw,
+			link = mt7621_mdio_r32(gsw,
 					       0x3008 + (i * 0x100)) & 0x1;
 
 			if (link != priv->link[i]) {
@@ -61,18 +163,35 @@ static irqreturn_t gsw_interrupt_mt7621(
 			}
 		}
 
-	mt7620_handle_carrier(priv);
+	mt7621_handle_carrier(priv);
 
 	return IRQ_HANDLED;
 }
 
+#define SYSC_REG_RSTCTRL	0x34
+
+void mt7621_fe_reset(u32 reset_bits)
+{
+	u32 t;
+
+	t = rt_sysc_r32(SYSC_REG_RSTCTRL);
+	t |= reset_bits;
+	rt_sysc_w32(t, SYSC_REG_RSTCTRL);
+	usleep_range(10, 20);
+
+	t &= ~reset_bits;
+	rt_sysc_w32(t, SYSC_REG_RSTCTRL);
+	usleep_range(10, 20);
+}
+
+
 static void mt7621_hw_init(struct mt7620_gsw *gsw, struct device_node *np)
 {
 	u32 i;
 	u32 val;
 
 	/* wardware reset the switch */
-	fe_reset(RST_CTRL_MCM);
+	mt7621_fe_reset(RST_CTRL_MCM);
 	mdelay(10);
 
 	/* reduce RGMII2 PAD driving strength */
@@ -89,36 +208,36 @@ static void mt7621_hw_init(struct mt7620
 
 	/* turn off all PHYs */
 	for (i = 0; i <= 4; i++) {
-		val = _mt7620_mii_read(gsw, i, 0x0);
+		val = gsw_mt7621_mii_read(gsw, i, 0x0);
 		val |= BIT(11);
-		_mt7620_mii_write(gsw, i, 0x0, val);
+		gsw_mt7621_mii_write(gsw, i, 0x0, val);
 	}
 
 	/* reset the switch */
-	mt7530_mdio_w32(gsw, 0x7000, 0x3);
+	mt7621_mdio_w32(gsw, 0x7000, 0x3);
 	usleep_range(10, 20);
 
 	if ((rt_sysc_r32(SYSC_REG_CHIP_REV_ID) & 0xFFFF) == 0x0101) {
 		/* (GE1, Force 1000M/FD, FC ON, MAX_RX_LENGTH 1536) */
 		mtk_switch_w32(gsw, 0x2305e30b, GSW_REG_MAC_P0_MCR);
-		mt7530_mdio_w32(gsw, 0x3600, 0x5e30b);
+		mt7621_mdio_w32(gsw, 0x3600, 0x5e30b);
 	} else {
 		/* (GE1, Force 1000M/FD, FC ON, MAX_RX_LENGTH 1536) */
 		mtk_switch_w32(gsw, 0x2305e33b, GSW_REG_MAC_P0_MCR);
-		mt7530_mdio_w32(gsw, 0x3600, 0x5e33b);
+		mt7621_mdio_w32(gsw, 0x3600, 0x5e33b);
 	}
 
 	/* (GE2, Link down) */
 	mtk_switch_w32(gsw, 0x8000, GSW_REG_MAC_P1_MCR);
 
 	/* Set switch max RX frame length to 2k */
-	mt7530_mdio_w32(gsw, GSW_REG_GMACCR, 0x3F0B);
+	mt7621_mdio_w32(gsw, GSW_REG_GMACCR, 0x3F0B);
 
 	/* Enable Port 6, P5 as GMAC5, P5 disable */
-	val = mt7530_mdio_r32(gsw, 0x7804);
+	val = mt7621_mdio_r32(gsw, 0x7804);
 	val &= ~BIT(8);
 	val |= BIT(6) | BIT(13) | BIT(16);
-	mt7530_mdio_w32(gsw, 0x7804, val);
+	mt7621_mdio_w32(gsw, 0x7804, val);
 
 	val = rt_sysc_r32(0x10);
 	val = (val >> 6) & 0x7;
@@ -128,76 +247,76 @@ static void mt7621_hw_init(struct mt7620
 		/* 40Mhz */
 
 		/* disable MT7530 core clock */
-		_mt7620_mii_write(gsw, 0, 13, 0x1f);
-		_mt7620_mii_write(gsw, 0, 14, 0x410);
-		_mt7620_mii_write(gsw, 0, 13, 0x401f);
-		_mt7620_mii_write(gsw, 0, 14, 0x0);
+		gsw_mt7621_mii_write(gsw, 0, 13, 0x1f);
+		gsw_mt7621_mii_write(gsw, 0, 14, 0x410);
+		gsw_mt7621_mii_write(gsw, 0, 13, 0x401f);
+		gsw_mt7621_mii_write(gsw, 0, 14, 0x0);
 
 		/* disable MT7530 PLL */
-		_mt7620_mii_write(gsw, 0, 13, 0x1f);
-		_mt7620_mii_write(gsw, 0, 14, 0x40d);
-		_mt7620_mii_write(gsw, 0, 13, 0x401f);
-		_mt7620_mii_write(gsw, 0, 14, 0x2020);
+		gsw_mt7621_mii_write(gsw, 0, 13, 0x1f);
+		gsw_mt7621_mii_write(gsw, 0, 14, 0x40d);
+		gsw_mt7621_mii_write(gsw, 0, 13, 0x401f);
+		gsw_mt7621_mii_write(gsw, 0, 14, 0x2020);
 
 		/* for MT7530 core clock = 500Mhz */
-		_mt7620_mii_write(gsw, 0, 13, 0x1f);
-		_mt7620_mii_write(gsw, 0, 14, 0x40e);
-		_mt7620_mii_write(gsw, 0, 13, 0x401f);
-		_mt7620_mii_write(gsw, 0, 14, 0x119);
+		gsw_mt7621_mii_write(gsw, 0, 13, 0x1f);
+		gsw_mt7621_mii_write(gsw, 0, 14, 0x40e);
+		gsw_mt7621_mii_write(gsw, 0, 13, 0x401f);
+		gsw_mt7621_mii_write(gsw, 0, 14, 0x119);
 
 		/* enable MT7530 PLL */
-		_mt7620_mii_write(gsw, 0, 13, 0x1f);
-		_mt7620_mii_write(gsw, 0, 14, 0x40d);
-		_mt7620_mii_write(gsw, 0, 13, 0x401f);
-		_mt7620_mii_write(gsw, 0, 14, 0x2820);
+		gsw_mt7621_mii_write(gsw, 0, 13, 0x1f);
+		gsw_mt7621_mii_write(gsw, 0, 14, 0x40d);
+		gsw_mt7621_mii_write(gsw, 0, 13, 0x401f);
+		gsw_mt7621_mii_write(gsw, 0, 14, 0x2820);
 
 		usleep_range(20, 40);
 
 		/* enable MT7530 core clock */
-		_mt7620_mii_write(gsw, 0, 13, 0x1f);
-		_mt7620_mii_write(gsw, 0, 14, 0x410);
-		_mt7620_mii_write(gsw, 0, 13, 0x401f);
+		gsw_mt7621_mii_write(gsw, 0, 13, 0x1f);
+		gsw_mt7621_mii_write(gsw, 0, 14, 0x410);
+		gsw_mt7621_mii_write(gsw, 0, 13, 0x401f);
 	} else {
 		/* 20Mhz Xtal - TODO */
 	}
 
 	/* RGMII */
-	_mt7620_mii_write(gsw, 0, 14, 0x1);
+	gsw_mt7621_mii_write(gsw, 0, 14, 0x1);
 
 	/* set MT7530 central align */
-	val = mt7530_mdio_r32(gsw, 0x7830);
+	val = mt7621_mdio_r32(gsw, 0x7830);
 	val &= ~BIT(0);
 	val |= BIT(1);
-	mt7530_mdio_w32(gsw, 0x7830, val);
-	val = mt7530_mdio_r32(gsw, 0x7a40);
+	mt7621_mdio_w32(gsw, 0x7830, val);
+	val = mt7621_mdio_r32(gsw, 0x7a40);
 	val &= ~BIT(30);
-	mt7530_mdio_w32(gsw, 0x7a40, val);
-	mt7530_mdio_w32(gsw, 0x7a78, 0x855);
+	mt7621_mdio_w32(gsw, 0x7a40, val);
+	mt7621_mdio_w32(gsw, 0x7a78, 0x855);
 
 	/* delay setting for 10/1000M */
-	mt7530_mdio_w32(gsw, 0x7b00, 0x102);
-	mt7530_mdio_w32(gsw, 0x7b04, 0x14);
+	mt7621_mdio_w32(gsw, 0x7b00, 0x102);
+	mt7621_mdio_w32(gsw, 0x7b04, 0x14);
 
 	/* lower Tx Driving*/
-	mt7530_mdio_w32(gsw, 0x7a54, 0x44);
-	mt7530_mdio_w32(gsw, 0x7a5c, 0x44);
-	mt7530_mdio_w32(gsw, 0x7a64, 0x44);
-	mt7530_mdio_w32(gsw, 0x7a6c, 0x44);
-	mt7530_mdio_w32(gsw, 0x7a74, 0x44);
-	mt7530_mdio_w32(gsw, 0x7a7c, 0x44);
+	mt7621_mdio_w32(gsw, 0x7a54, 0x44);
+	mt7621_mdio_w32(gsw, 0x7a5c, 0x44);
+	mt7621_mdio_w32(gsw, 0x7a64, 0x44);
+	mt7621_mdio_w32(gsw, 0x7a6c, 0x44);
+	mt7621_mdio_w32(gsw, 0x7a74, 0x44);
+	mt7621_mdio_w32(gsw, 0x7a7c, 0x44);
 
 	/* turn on all PHYs */
 	for (i = 0; i <= 4; i++) {
-		val = _mt7620_mii_read(gsw, i, 0);
+		val = gsw_mt7621_mii_read(gsw, i, 0);
 		val &= ~BIT(11);
-		_mt7620_mii_write(gsw, i, 0, val);
+		gsw_mt7621_mii_write(gsw, i, 0, val);
 	}
 
 	/* enable irq */
-	mt7530_mdio_w32(gsw, 0x7008, 0x1f);
-	val = mt7530_mdio_r32(gsw, 0x7808);
+	mt7621_mdio_w32(gsw, 0x7008, 0x1f);
+	val = mt7621_mdio_r32(gsw, 0x7808);
 	val |= 3 << 16;
-	mt7530_mdio_w32(gsw, 0x7808, val);
+	mt7621_mdio_w32(gsw, 0x7808, val);
 }
 
 static const struct of_device_id mediatek_gsw_match[] = {
@@ -234,6 +353,8 @@ int mtk_gsw_init(struct fe_priv *priv)
 
 	return 0;
 }
+EXPORT_SYMBOL(mtk_gsw_init);
+
 
 static int mt7621_gsw_probe(struct platform_device *pdev)
 {
Index: linux-4.14.54/drivers/net/ethernet/mtk/mt7530.c
===================================================================
--- linux-4.14.54.orig/drivers/net/ethernet/mtk/mt7530.c
+++ linux-4.14.54/drivers/net/ethernet/mtk/mt7530.c
@@ -977,3 +977,7 @@ mt7530_probe(struct device *dev, void __
 
 	return 0;
 }
+EXPORT_SYMBOL(mt7530_probe);
+
+MODULE_LICENSE("GPL");
+
Index: linux-4.14.54/drivers/net/ethernet/mtk/mtk_eth_soc.c
===================================================================
--- linux-4.14.54.orig/drivers/net/ethernet/mtk/mtk_eth_soc.c
+++ linux-4.14.54/drivers/net/ethernet/mtk/mtk_eth_soc.c
@@ -137,6 +137,7 @@ void fe_reset(u32 reset_bits)
 	rt_sysc_w32(t, SYSC_REG_RSTCTRL);
 	usleep_range(10, 20);
 }
+EXPORT_SYMBOL(fe_reset);
 
 static inline void fe_int_disable(u32 mask)
 {
Index: linux-4.14.54/drivers/net/ethernet/mtk/mdio_mt7620.c
===================================================================
--- linux-4.14.54.orig/drivers/net/ethernet/mtk/mdio_mt7620.c
+++ linux-4.14.54/drivers/net/ethernet/mtk/mdio_mt7620.c
@@ -53,6 +53,7 @@ u32 _mt7620_mii_write(struct mt7620_gsw
 
 	return 0;
 }
+EXPORT_SYMBOL(_mt7620_mii_write);
 
 u32 _mt7620_mii_read(struct mt7620_gsw *gsw, int phy_addr, int phy_reg)
 {
@@ -73,6 +74,7 @@ u32 _mt7620_mii_read(struct mt7620_gsw *
 
 	return d;
 }
+EXPORT_SYMBOL(_mt7620_mii_read);
 
 int mt7620_mdio_write(struct mii_bus *bus, int phy_addr, int phy_reg, u16 val)
 {
@@ -96,6 +98,7 @@ void mt7530_mdio_w32(struct mt7620_gsw *
 	_mt7620_mii_write(gsw, 0x1f, (reg >> 2) & 0xf,  val & 0xffff);
 	_mt7620_mii_write(gsw, 0x1f, 0x10, val >> 16);
 }
+EXPORT_SYMBOL(mt7530_mdio_w32);
 
 u32 mt7530_mdio_r32(struct mt7620_gsw *gsw, u32 reg)
 {
@@ -107,6 +110,7 @@ u32 mt7530_mdio_r32(struct mt7620_gsw *g
 
 	return (high << 16) | (low & 0xffff);
 }
+EXPORT_SYMBOL(mt7530_mdio_r32);
 
 static unsigned char *fe_speed_str(int speed)
 {
@@ -147,6 +151,7 @@ void mt7620_handle_carrier(struct fe_pri
 	else
 		netif_carrier_off(priv->netdev);
 }
+EXPORT_SYMBOL(mt7620_handle_carrier);
 
 void mt7620_print_link_state(struct fe_priv *priv, int port, int link,
 			     int speed, int duplex)
Index: linux-4.14.54/drivers/net/ethernet/mtk/Makefile
===================================================================
--- linux-4.14.54.orig/drivers/net/ethernet/mtk/Makefile
+++ linux-4.14.54/drivers/net/ethernet/mtk/Makefile
@@ -2,21 +2,40 @@
 # Makefile for the Ralink SoCs built-in ethernet macs
 #
 
-mtk-eth-soc-y					+= mtk_eth_soc.o ethtool.o
+#mtk-eth-soc-y					+= mtk_eth_soc.o ethtool.o
+
+#mtk-eth-soc-$(CONFIG_NET_MEDIATEK_MDIO)		+= mdio.o
+#mtk-eth-soc-$(CONFIG_NET_MEDIATEK_MDIO_RT2880)	+= mdio_rt2880.o
+#mtk-eth-soc-$(CONFIG_NET_MEDIATEK_MDIO_MT7620)	+= mdio_mt7620.o
+#
+#mtk-eth-soc-$(CONFIG_NET_MEDIATEK_OFFLOAD)	+= mtk_offload.o mtk_debugfs.o
+#
+#mtk-eth-soc-$(CONFIG_NET_MEDIATEK_RT2880)	+= soc_rt2880.o
+#mtk-eth-soc-$(CONFIG_NET_MEDIATEK_RT3050)	+= soc_rt3050.o
+#mtk-eth-soc-$(CONFIG_NET_MEDIATEK_RT3883)	+= soc_rt3883.o
+#mtk-eth-soc-$(CONFIG_NET_MEDIATEK_MT7620)	+= soc_mt7620.o
+#mtk-eth-soc-$(CONFIG_NET_MEDIATEK_MT7621)	+= soc_mt7621.o
+#
+#obj-$(CONFIG_NET_MEDIATEK_ESW_RT3050)		+= esw_rt3050.o
+#obj-$(CONFIG_NET_MEDIATEK_GSW_MT7620)		+= gsw_mt7620.o mt7530.o
+#obj-$(CONFIG_NET_MEDIATEK_GSW_MT7621)		+= gsw_mt7621.o mt7530.o
+
+
+obj-$(CONFIG_NET_MEDIATEK_SOC)			+= mtk-eth-soc.o gsw-mt7621.o
+
+gsw-mt7621-$(CONFIG_NET_MEDIATEK_SOC) += gsw_mt7621.o
+
+mtk-eth-soc-$(CONFIG_NET_MEDIATEK_SOC) += mtk_eth_soc.o soc_mt7621.o ethtool.o mt7530.o
+
+ifeq ($(CONFIG_NET_MEDIATEK_MDIO),y)
+mtk-eth-soc-$(CONFIG_NET_MEDIATEK_SOC) += mdio.o
+endif
+
+ifeq ($(CONFIG_NET_MEDIATEK_MDIO_MT7620),y)
+mtk-eth-soc-$(CONFIG_NET_MEDIATEK_SOC) += mdio_mt7620.o
+endif
+
+ifeq ($(CONFIG_NET_MEDIATEK_OFFLOAD),y)
+mtk-eth-soc-$(CONFIG_NET_MEDIATEK_SOC) += mtk_offload.o mtk_debugfs.o
+endif
 
-mtk-eth-soc-$(CONFIG_NET_MEDIATEK_MDIO)		+= mdio.o
-mtk-eth-soc-$(CONFIG_NET_MEDIATEK_MDIO_RT2880)	+= mdio_rt2880.o
-mtk-eth-soc-$(CONFIG_NET_MEDIATEK_MDIO_MT7620)	+= mdio_mt7620.o
-
-mtk-eth-soc-$(CONFIG_NET_MEDIATEK_OFFLOAD)	+= mtk_offload.o mtk_debugfs.o
-
-mtk-eth-soc-$(CONFIG_NET_MEDIATEK_RT2880)	+= soc_rt2880.o
-mtk-eth-soc-$(CONFIG_NET_MEDIATEK_RT3050)	+= soc_rt3050.o
-mtk-eth-soc-$(CONFIG_NET_MEDIATEK_RT3883)	+= soc_rt3883.o
-mtk-eth-soc-$(CONFIG_NET_MEDIATEK_MT7620)	+= soc_mt7620.o
-mtk-eth-soc-$(CONFIG_NET_MEDIATEK_MT7621)	+= soc_mt7621.o
-
-obj-$(CONFIG_NET_MEDIATEK_ESW_RT3050)		+= esw_rt3050.o
-obj-$(CONFIG_NET_MEDIATEK_GSW_MT7620)		+= gsw_mt7620.o mt7530.o
-obj-$(CONFIG_NET_MEDIATEK_GSW_MT7621)		+= gsw_mt7621.o mt7530.o
-obj-$(CONFIG_NET_MEDIATEK_SOC)			+= mtk-eth-soc.o
